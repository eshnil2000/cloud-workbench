### Variables
benchmark_name = '<%= benchmark_name %>'
benchmark_name_sanitized = '<%= benchmark_name_sanitized %>'
benchmark_id = <%= benchmark_id %>
execution_id = <%= execution_id %>
chef_node_name = "#{execution_id}-#{benchmark_name_sanitized}"
tag_name = "cwb-#{benchmark_name_sanitized}"

# Private variables
vagrant_id = "cwb-#{benchmark_id}-#{execution_id}"
hostname = "cwb-#{execution_id}"
username = 'ubuntu'
instance_ready_timeout = 300 # seconds
# Make variables visible in global scope
azure_id = nil
softlayer_id = nil

def pub_key
  pub_key_path = ENV['SSH_KEY_PATH'] + '.pub'
  File.read(pub_key_path).strip
end

### Default configuration
VAGRANTFILE_API_VERSION = "2"
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.hostname = hostname

  config.ssh.username = username
  config.ssh.private_key_path = ENV['SSH_KEY_PATH']

  config.vm.synced_folder '.', '/vagrant', disabled: true
  # Fix SMB username promt: https://github.com/mitchellh/vagrant-aws/issues/365
  config.vm.allowed_synced_folder_types = :rsync

  # Butcher plugin that removes Chef nodes and clients
  if Vagrant.has_plugin?('vagrant-butcher')
    config.butcher.verify_ssl = false
  end

  <% if provider_name == 'aws' %>
  # AWS box
  config.vm.box = 'aws'
  config.vm.box_url = 'https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box'

  # AWS EC2 provider
  config.vm.provider :aws do |aws, override|
    # Fix for error in `vagrant-aws` plugin
    # https://github.com/mitchellh/vagrant/issues/5401#issuecomment-115240904
    override.nfs.functional = false

    # Authentication
    aws.access_key_id = ENV['AWS_ACCESS_KEY']
    aws.secret_access_key = ENV['AWS_SECRET_KEY']
    # Alternatively via pre-uploaded SSH key
    # aws.keypair_name = ENV['SSH_KEY_NAME']

    # SSH config
    aws.user_data = "#cloud-config\nssh_authorized_keys:\n  - " + pub_key

    # Instance defaults
    # Official Caninical Ubuntu image: 18.04 LTS hvm:ebs-ssd amd64 eu-central-1
    #  https://cloud-images.ubuntu.com/locator/ec2/
    aws.ami = 'ami-080d06f90eb293a27'
    aws.region = 'eu-central-1' # Europe/Frankfurt as default configuration
    aws.instance_type = 't2.micro'
    aws.security_groups = ['cwb-web']
    aws.instance_ready_timeout = instance_ready_timeout # default 120s
    aws.tags = {
      'Name' => tag_name
    }
  end
  <% elsif provider_name == 'google' %>
  # Google box
  config.vm.box = 'google'
  config.vm.box_url = 'https://github.com/mitchellh/vagrant-google/raw/master/google.box'

  # Google Compute Engine provider
  config.vm.provider :google do |google, override|
    # Authentication
    google.google_project_id = ENV['GOOGLE_PROJECT_ID']
    google.google_client_email = ENV['GOOGLE_CLIENT_EMAIL']
    google.google_json_key_location = ENV['GOOGLE_JSON_KEY_PATH']

    # Used to uniquely identify the VM
    google.name = vagrant_id

    # SSH config
    google.metadata = {
      'vagrant_id' => vagrant_id,
      'ssh-keys' => "#{username}:#{pub_key}"
    }

    # Instance defaults
    google.image = 'ubuntu-1604-xenial-v20181204'
    google.machine_type = 'n1-standard-1'
    google.zone = 'europe-west3-b' # Frankfurt
    google.instance_ready_timeout = instance_ready_timeout # default 20s
    google.tags = [tag_name]
  end
  <% elsif provider_name == 'azure' %>
  # Azure box
  config.vm.box = 'azure'
  config.vm.box_url = 'https://github.com/azure/vagrant-azure/raw/v2.0/dummy.box'

  # Variables
  vm_name = "cwb-#{execution_id}"
  # az account list-locations
  location = 'westeurope'
  resource_group = vm_name # MUST be unique
  # Composition: https://github.com/Azure/vagrant-azure/blob/v2.0/lib/vagrant-azure/util/machine_id_helper.rb
  azure_id = [resource_group, vm_name, location].join(':')

  config.vm.provider :azure do |azure, override|
    # Authentication
    azure.tenant_id = ENV['AZURE_TENANT_ID']
    azure.client_id = ENV['AZURE_CLIENT_ID']
    azure.client_secret = ENV['AZURE_CLIENT_SECRET']
    azure.subscription_id = ENV['AZURE_SUBSCRIPTION_ID']

    # Instance defaults
    azure.resource_group_name = resource_group
    azure.vm_name = vm_name
    azure.location = location
    # az vm image list --output table
    # az vm image list --output table --publisher Canonical --all
    azure.vm_image_urn = 'Canonical:UbuntuServer:16.04.0-LTS:16.04.201611150'
    # az vm list-sizes --location westeurope
    # https://azureprice.net/?region=westeurope
    azure.vm_size = 'Standard_DS1'
    azure.instance_ready_timeout = instance_ready_timeout # default 120s
  end
  <% elsif provider_name == 'softlayer' %>
  softlayer_id = "cwb-#{execution_id}"

  # Softlayer box
  config.vm.box = 'softlayer'
  config.vm.box_url = 'https://github.com/audiolize/vagrant-softlayer/raw/master/dummy.box'

  config.ssh.username = 'root'

  config.vm.provider :softlayer do |sl|
    # Authentication
    sl.username = ENV['SOFTLAYER_API_USERNAME']
    sl.api_key  = ENV['SOFTLAYER_API_KEY']
    sl.ssh_key  = ENV['SSH_KEY_NAME']

    # Instance defaults
    sl.domain = 'cloud-workbench.io'
    sl.datacenter = 'mel01'
    sl.operating_system = 'UBUNTU_14_64'
  end
  <% end %>

  # Chef client provisioner
  config.omnibus.chef_version = ENV['CHEF_OMNIBUS_CHEF_VERSION']
  config.vm.provision 'cwb', type: 'chef_client' do |chef|
    chef.log_level = :info
    chef.provisioning_path = ENV['CHEF_PROVISIONING_PATH']
    chef.chef_server_url = ENV['CHEF_SERVER_URL']
    chef.validation_key_path = ENV['CHEF_VALIDATION_KEY_PATH']

    # MUST be unique in scope of all benchmarks
    chef.node_name = chef_node_name

    chef.run_list = %w(cwb)
    chef.json = {
      'cwb' => {
        'server' => ENV['CWB_SERVER_HOST'],
        'provider_name' => '<%= provider_name %>',
        'azure_id' => azure_id,
        'softlayer_id' => softlayer_id,
      }
    }
  end
end

###### BEGIN custom Vagrantfile ######
<%= vagrantfile %>
